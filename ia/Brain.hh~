//
// Brain.hh for  in /home/carpen_t/projets/c++/iabomber
//
// Made by thibault carpentier
// Login   <carpen_t@epitech.net>
//
// Started on  Mon May 14 13:25:11 2012 thibault carpentier
// Last update Tue May 15 10:39:47 2012 thibault carpentier
//

/* Documentation tag for Doxygen
 */

/*! \mainpage PLEGAT Documentation
 *
 * \section intro_sec Introduction
 *
 * This is the Plegat documentation.
 *
 * \section install_sec Installation
 *
 * \subsection tools_subsec Tools required:
 * - Java Runtime Environment (JRE) 1.4.2 or later
 *
 * \subsection running Running the program
 * In a command window, etc etc...
 *
 * \section copyright Copyright and License
 * This license applies to etc etc...
 *
 * <BR><BR>
 *
 */

/**
 * \file Brain.hh
 * \brief Classe API Lua-C++, contain all functions callable with the lua-script.
 * \author TeamBicycle.
 * \version 1.0
 * \date 14 May 2012
 *
 * This Class is the Emulated Object in the lua file, it create every method callable in the lua script.
 *
 */

#ifndef _BRAIN_H_
# define _BRAIN_H_

# include <map>
# include <string>
# include <iostream>
# include "VirtualMachine.hh"
# include "Script.hh"

using namespace Bomberman;
using namespace LuaVirtualMachine;

/*! \namespace Bomberman
 *  \brief main project namespace
 * Bomberman is the main project namespace.
 *
 */
namespace Bomberman
{
/*! \namespace Thinking
 *  \brief IA namespace
 * Thinking is the Artificial Intelligence NameSpace.
 *
 */
  namespace Thinking
  {
    /*! \class Brain
     * \brief Brain class encapsulate calls from lua and organise Scripting calls.
     *
     *  The Brain class is a encapsulation of Api Methods, and herit from Script to organise Scipting calls.
     */
    class Brain : public Script
    {
    typedef int (Bomberman::Thinking::Brain::*fctMeth)(VirtualMachine &);

   public:
      /*!
       *  \brief Constructor.
       *
       *  Constructor of Brain Class, initialise the Api Methods to makes them callabe by the lua.
       *
       */
      Brain(void);
      /*!
       *  \brief Destructor.
       *
       *  Destructor of Brain Class.
       *
       */
      ~Brain(void);

      /*!
       *  \brief Method redirecting calls.
       *
       *  Method called by Lua each time that an C++ function is called,
       *  redirecting calls to the real method called.
       *
       *  \param vm : The Virtual Machine where the script is emulated.
       *  \param fctNb : The id of the called Method on the stack.
       *  \return (int) -1 if the method does not exist and the number
       *  of return value of the Method called on succes
       *
       */
      int scriptCalling(VirtualMachine &vm, int fctNb);
      /*!
       *  \brief Method hanling returns from functions called in lua.
       *
       *  Method called by Lua each time a Lua function is called from the C++, to use Lua
       *  return values.
       *
       *  \param vm : The Virtual Machine where the script is emulated.
       *  \param strFunc : The name of the returning function.
       *  \return (void)
       *
       */
      void getReturn(VirtualMachine &vm, const std::string &strFunc);


      /*!
       *  \brief The test Method.
       *
       *  This is the TESSSST !
       *  A BIG TEST !
       *
       *  \param vm : (Automatically added by lua) The Virtual Machine where the script is emulated.
       *  \return (int) The number of value pushed on the lua-stack.
       *
       */
      int test(VirtualMachine &vm);

    private:
      /*!
       *  \brief Unused Constructor.
       *
       *  Unused Constructor of Brain Class.
       *
       *  \param Unused.
       */
      Brain(Brain const &);
      /*!
       *  \brief Unused Constructor.
       *
       *  Unused Constructor of Brain Class.
       *
       *  \param Unused.
       */
      Brain& operator=(Brain const &);

      std::map<int, fctMeth> meth_; /*!< Method and id associeted storage. Please remember to add new method on the constructor with : meth_[registerFct("exemple")] = &Brain::example;*/
    };
  }
}

#endif /*!_BRAIN_H_*/
